import pytest
import datetime
import os
from typing import Dict, List

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
test_results = {
    'passed': [],
    'failed': [],
    'skipped': [],
    'total': 0,
    'start_time': None,
    'end_time': None
}


def pytest_configure(config):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ pytest"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω
    if os.path.exists("report.md"):
        os.remove("report.md")


@pytest.hookimpl(tryfirst=True)
def pytest_sessionstart(session):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_results['start_time'] = datetime.datetime.now()


@pytest.hookimpl(tryfirst=True)
def pytest_sessionfinish(session, exitstatus):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_results['end_time'] = datetime.datetime.now()
    generate_report()


@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    outcome = yield
    report = outcome.get_result()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∏–∑ test_tour.py
    if 'test_tour' in str(item.fspath):
        test_info = {
            'name': item.name,
            'nodeid': item.nodeid,
            'duration': report.duration,
            'when': report.when
        }

        if report.when == 'call':  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            test_results['total'] += 1
            if report.outcome == 'passed':
                test_results['passed'].append(test_info)
            elif report.outcome == 'failed':
                test_info['error'] = str(report.longrepr)
                test_results['failed'].append(test_info)
            elif report.outcome == 'skipped':
                test_results['skipped'].append(test_info)


def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    with open("report.md", "w", encoding="utf-8") as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        f.write("# –û—Ç—á–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤\n\n")

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        f.write("## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n")
        f.write(f"- **–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏:** `test_tour.py`\n")
        f.write(f"- **–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:** {test_results['start_time'].strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"- **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {test_results['end_time'].strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"- **–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {test_results['end_time'] - test_results['start_time']}\n\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        total_tests = test_results['total']
        passed = len(test_results['passed'])
        failed = len(test_results['failed'])
        skipped = len(test_results['skipped'])

        f.write(f"- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {total_tests}\n")
        f.write(f"- **–£—Å–ø–µ—à–Ω–æ:** {passed}\n")
        f.write(f"- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** {failed}\n")
        f.write(f"- **–ü—Ä–æ–ø—É—â–µ–Ω–æ:** {skipped}\n")

        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if total_tests > 0:
            success_rate = (passed / total_tests) * 100
            f.write(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö:** {success_rate:.2f}%\n")

        f.write("\n")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º
        if failed > 0:
            f.write("## –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n\n")
            for test in test_results['failed']:
                f.write(f"### ‚ùå {test['name']}\n")
                f.write(f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {test['duration']:.2f} —Å–µ–∫\n")
                f.write(f"- **–û—à–∏–±–∫–∞:** \n```\n{test.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n```\n\n")

        # –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if passed > 0:
            f.write("## –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã\n\n")
            for test in test_results['passed']:
                f.write(f"### ‚úÖ {test['name']}\n")
                f.write(f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {test['duration']:.2f} —Å–µ–∫\n\n")

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if skipped > 0:
            f.write("## –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n\n")
            for test in test_results['skipped']:
                f.write(f"### ‚è≠Ô∏è {test['name']}\n\n")

        # –°–≤–æ–¥–∫–∞
        f.write("## –°–≤–æ–¥–∫–∞\n\n")
        if failed == 0 and skipped == 0:
            f.write("üéâ **–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!**\n")
        elif failed == 0:
            f.write("‚ö†Ô∏è **–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã**\n")
        else:
            f.write("‚ùå **–ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**\n")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
def pytest_terminal_summary(terminalreporter, exitstatus, config):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥"""
    terminalreporter.write_sep("=", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    terminalreporter.write_line(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: report.md")
    terminalreporter.write_line(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∏–∑ test_tour.py: {test_results['total']}")